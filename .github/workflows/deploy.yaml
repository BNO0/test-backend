name: deploy backend
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest # 작업이 실행될 환경
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Gradle Wrapper 실행 권한 추가
        run: chmod +x gradlew
      - name: 환경변수 설정
        run: echo "${{ secrets.APPLICATION_YML_BACKEND}}" > ./src/main/resources/application.yml
        # working-directory: /app/backend
      - name: Gradle로 빌드(CI)
        run: ./gradlew build
      
      # docker login
      - run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - run: docker build -t sep-test-backend ./
      # - run: docker push sep-test-backend

      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*'

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          # AWS
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          # AWS Elastic Beanstalk 환경 application 명
          application_name: sep-test-back
          # AWS Elastic Beanstalk 환경 명
          environment_name: Sep-test-back-env
          # AWS S3 버킷 명
          existing_bucket_name: elasticbeanstalk-us-east-2-646588460992
          region: us-east-2
          version_label: ${{ github.sha }}
          deployment_package: deploy.zip
          wait_for_environment_recovery: 500

      # - name: 도커허브에 로그인
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USER_NAME }}
      #     password: ${{ secrets.DOCKER_USER_PW }}
      # - name: 이미지 빌드
      #   run: docker build -t ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be .
      # - name: 도커허브에 이미지 푸시
      #   run: docker push ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be
      # - name: AWS EC2에 ssh 접속 후 배포
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.AWS_IP }}
      #     port: 22
      #     username: ubuntu
      #     key: ${{ secrets.AWS_KEY }}
      #     script: |
      #       docker pull ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_IMAGE_NAME }}-be
      #       docker-compose up -d